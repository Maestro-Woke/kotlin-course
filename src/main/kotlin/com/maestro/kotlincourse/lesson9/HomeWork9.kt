package com.maestro.com.maestro.kotlincourse.lesson9

fun main() {
    val birthdayPerson = "–°–∞—à–∞ @webrelab"
    println(" –ü—Ä–∏–≤–µ—Ç, $birthdayPerson! ")

    // –ü–æ–∂–µ–ª–∞–Ω–∏—è
    val wishes = arrayOf(
        "–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ü—É—Å—Ç—å –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ –±—É–¥–µ—Ç —Å—Ç–æ–ª—å–∫–æ –∂–µ —Ä–∞–¥–æ—Å—Ç–∏, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –≤ –∫–æ–¥–µ!",
        "–ñ–µ–ª–∞—é, —á—Ç–æ–±—ã —Ç–≤–æ—è –∂–∏–∑–Ω—å –±—ã–ª–∞ –∫–∞–∫ –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç ‚Äî –±–µ–∑ –±–∞–≥–æ–≤ –∏ —Å —Ö–æ—Ä–æ—à–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π!",
        "–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –±–∏–ª–¥ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ –±—É–¥–µ—Ç —É—Å–ø–µ—à–Ω—ã–º –∏ –±–µ–∑ –æ—à–∏–±–æ–∫!"
    )

    val endings = arrayOf(
        "–ü–æ–º–Ω–∏, —á—Ç–æ –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ –Ω–æ–≤—ã–π pull request –∫ –∂–∏–∑–Ω–∏!",
        "–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç –±—É–¥–µ—Ç –∑–∞–∫–æ–º–º–∏—á–µ–Ω –≤ —Ç–≤–æ—é –ø–∞–º—è—Ç—å —Å –ª—é–±–æ–≤—å—é!",
        "–°—á–∞—Å—Ç—å—è —Ç–µ–±–µ, –∑–¥–æ—Ä–æ–≤—å—è –∏ –º–Ω–æ–≥–æ —É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤!",
    )

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
    val finalWish = "${wishes.random()} ${endings.random()}"

    val acronym = createAcronym(finalWish)

    println("\n –£ –º–µ–Ω—è –µ—Å—Ç—å –¥–ª—è —Ç–µ–±—è –∑–∞–≥–∞–¥–∫–∞: ")
    val riddle = "–ß—Ç–æ –∏–¥—ë—Ç –≤–≤–µ—Ä—Ö, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç —Å–ø—É—Å—Ç–∏—Ç—å—Å—è?"
    println(" –ó–∞–≥–∞–¥–∫–∞: $riddle")

    // –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–≥–∞–¥–∫—É
    val correctAnswer = "–ª–µ—Å—Ç–Ω–∏—Ü–∞"

    var attempts = 0
    var answeredCorrectly = false

    do {
        println("\n –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:")
        val answer = readlnOrNull()?.trim()?.lowercase()

        attempts++
        if (answer == correctAnswer) {
            println(" –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü! ")
            answeredCorrectly = true
        } else {
            println(" –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        }
    } while (!answeredCorrectly && attempts < 3)

    // –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if (answeredCorrectly) {
        println("\n –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ! üéä")
        printWithDelay(finalWish)
        println(" –ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: $acronym")
    } else {
        println("\n –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–≥–∞–¥–∞—Ç—å –∑–∞–≥–∞–¥–∫—É. –ù–æ —è –≤—Å—ë —Ä–∞–≤–Ω–æ –∂–µ–ª–∞—é —Ç–µ–±–µ —Å—á–∞—Å—Ç—å—è! ")
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã
fun createAcronym(phrase: String): String {
    var acronym = ""
    val words = phrase.split(" ")
    for (word in words) {
        acronym += word.first().uppercaseChar()
    }
    return acronym
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø–µ—á–∞—Ç–∏
fun printWithDelay(text: String) {
    for (char in text) {
        print(char)
        Thread.sleep(50)
    }
    println()
}



